@page "/myorders/{orderId:int}"
@inject HttpClient HttpClient
@using System.Threading;
@implements IDisposable
@attribute [Authorize]


<div class="main">
    @if (InvalidOrder)
    {
        <h2>!No!</h2>
        <p>Lo sentimos, esta orden no puede ser cargada</p>
    }
    else if (OrderWithStatus == null)
    {
        <text>Cargando...</text>
    }
    else
    {
        <div class="track-order">
            <div class="track-order-title">
                <h2>
                    Pedido Realizado
                    @OrderWithStatus.Order.GetFormattedCreatedTime()
                </h2>
                <p class="ml-auto mb-0">
                    Estatus: <strong>@OrderWithStatus.StatusText</strong>
                </p>
            </div>
            <div class="track-order-body">
                <div class="track-order-details">
                    <OrderReview Order="OrderWithStatus.Order" />
                </div>
                <div class="track-order-map">
                    <Map Markers="OrderWithStatus.MapMarkers" />
                </div>
            </div>
       </div>
    }

</div>

@code {

    [Parameter]
    public int OrderId { get; set; }

    OrderWithStatus OrderWithStatus;
    bool InvalidOrder;

    CancellationTokenSource PollingCancelationToken;

    private async void PollForUpdates()
    {
        PollingCancelationToken = new CancellationTokenSource();
        while (!PollingCancelationToken.IsCancellationRequested)
        {
            try
            {
                InvalidOrder = false;
                OrderWithStatus = await HttpClient.GetFromJsonAsync<OrderWithStatus>($"orders/{OrderId}");
                if (OrderWithStatus.StatusText == "Entregado")
                {
                    PollingCancelationToken.Cancel();
                }
            }
            catch (Exception ex)
            {
                InvalidOrder = true;
                PollingCancelationToken.Cancel();
                Console.Error.WriteLine(ex);
            }
            StateHasChanged();
            await Task.Delay(4000);
        }
    }

    protected override void OnParametersSet()
    {
        PollingCancelationToken?.Cancel();
        PollForUpdates();
    }

    void IDisposable.Dispose()
    {
        PollingCancelationToken?.Cancel();
    }

}
