@page "/"
@inject HttpClient HttpClient;
@inject NavigationManager NavigationManager
@inject OrderState OrderState
 

<div class="main">
    <ul class="pizza-cards">
        @if (Specials != null)
        {
            foreach (var Special in Specials)
            {
                <li @onclick="@(() => OrderState.ShowConfigurePizzaGialog(Special))" style="background-image:url('@Special.ImageUrl')">
                    <div class="pizza-info">
                        <span class="title">@Special.Name</span>
                        @Special.Description
                        <span class="price">
                            @Special.GetFormattedBasePrice()
                        </span>
                    </div>
                </li>
            }
        }
    </ul>
</div>
<div class="sidebar">
    @if (OrderState.Order.Pizzas.Any())
    {
        <div class="order-contents">
            <h2>Tu Orden</h2>
            @foreach (var ConfiguredPizza in OrderState.Order.Pizzas)
            {
                <ConfiguredPizzaItem Pizza="ConfiguredPizza"
                                     OnRemoved="@(()=>OrderState.RemoveConfiguredPizza(ConfiguredPizza))"></ConfiguredPizzaItem>
            }
        </div>
    }
    else
    {
        <div class="empty-cart">
            Aún no has seleccionado su Pizza
        </div>
    }
<div class="order-total @(OrderState.Order.Pizzas.Any()?"":"hidden")">
    Total:
    <span class="total-price">@OrderState.Order.GetFormattedTotalPrice()</span>
    <button class="btn btn-warning" disabled="@(OrderState.Order.Pizzas.Count==0)" @onclick="@PlaceOrder">Ordenar ></button>
</div>

</div>

@if (OrderState.ShowingConfigureGialog)
{
    <ConfigurePizzaDialog Pizza="OrderState.ConfiguringPizza"
                          OnCancel="OrderState.CancelConfigurePizzaGialog"
                          OnConfirm="OrderState.ConfirmConfigurePizzaDialog"
                          />
}



@code{

    /// <summary>
    /// Variable que llena la pizza
    /// </summary>
    List<PizzaSpecial> Specials;




    /// <summary>
    /// Metodo que se carga cuando inicializa el Componente
    /// </summary>
    /// <returns></returns>
    protected async override Task OnInitializedAsync()
    {
        Specials = await HttpClient.GetFromJsonAsync<List<PizzaSpecial>>("special");
    }




    async Task PlaceOrder()
    {
        var Response=await HttpClient.PostAsJsonAsync("orders", OrderState.Order);
        var NewOrderId = await Response.Content.ReadFromJsonAsync<int>();
        OrderState.ResetOrder();
        NavigationManager.NavigateTo($"myorders/{NewOrderId}");
    }


   
}