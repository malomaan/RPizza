@page "/"
@inject HttpClient HttpClient;
@inject NavigationManager NavigationManager


<div class="main">
    <ul class="pizza-cards">
        @if (Specials != null)
        {
            foreach (var Special in Specials)
            {
                <li @onclick="@(() => ShowConfigurePizzaGialog(Special))" style="background-image:url('@Special.ImageUrl')">
                    <div class="pizza-info">
                        <span class="title">@Special.Name</span>
                        @Special.Description
                        <span class="price">
                            @Special.GetFormattedBasePrice()
                        </span>
                    </div>
                </li>
            }
        }
    </ul>
</div>
<div class="sidebar">
    @if (Order.Pizzas.Any())
    {
        <div class="order-contents">
            <h2>Tu Orden</h2>
            @foreach (var ConfiguredPizza in Order.Pizzas)
            {
                <ConfiguredPizzaItem Pizza="ConfiguredPizza"
                                     OnRemoved="@(()=>RemoveConfiguredPizza(ConfiguredPizza))"></ConfiguredPizzaItem>
            }
        </div>
    }
    else
    {
        <div class="empty-cart">
            Aún no has seleccionado su Pizza
        </div>
    }
<div class="order-total @(Order.Pizzas.Any()?"":"hidden")">
    Total:
    <span class="total-price">@Order.GetFormattedTotalPrice()</span>
    <button class="btn btn-warning" disabled="@(Order.Pizzas.Count==0)" @onclick="@PlaceOrder">Ordenar ></button>
</div>

</div>

@if (ShowingConfigureGialog)
{
    <ConfigurePizzaDialog Pizza="ConfiguringPizza"
                          OnCancel="CancelConfigurePizzaGialog"
                          OnConfirm="ConfirmConfigurePizzaDialog"
                          />
}



@code{

    /// <summary>
    /// Variable que llena la pizza
    /// </summary>
    List<PizzaSpecial> Specials;

    Pizza ConfiguringPizza;
    bool ShowingConfigureGialog;
    Order Order = new Order();


    /// <summary>
    /// Metodo que se carga cuando inicializa el Componente
    /// </summary>
    /// <returns></returns>
    protected async override Task OnInitializedAsync()
    {
        Specials = await HttpClient.GetFromJsonAsync<List<PizzaSpecial>>("special");
    }

    void ShowConfigurePizzaGialog(PizzaSpecial special)
    {
        ConfiguringPizza = new Pizza()
        {
            Special = special,
            SpecialId = special.Id,
            Size = Pizza.DefaultSize,
            Toppings = new List<PizzaTopping>()
        };
        ShowingConfigureGialog = true;
    }

    void CancelConfigurePizzaGialog()
    {
        ConfiguringPizza = null;
        ShowingConfigureGialog = false;
    }

    void ConfirmConfigurePizzaDialog()
    {
        Order.Pizzas.Add(ConfiguringPizza);
        ConfiguringPizza = null;
        ShowingConfigureGialog = false;
    }

    void RemoveConfiguredPizza(Pizza pizza)
    {
        Order.Pizzas.Remove(pizza);
    }

    async Task PlaceOrder()
    {
        var Response=await HttpClient.PostAsJsonAsync("orders", Order);
        var NewOrderId = await Response.Content.ReadFromJsonAsync<int>();
        Order = new Order();
        NavigationManager.NavigateTo($"myorders/{NewOrderId}");
    }

}